name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CMAKE_VERSION: '3.28.3'
  LLVM_VERSION: '18'

jobs:
  quality-matrix:
    name: Quality Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        compiler: [clang]
        include:
          - os: ubuntu-latest
            cc: clang-18
            cxx: clang++-18
          - os: macos-latest
            cc: clang
            cxx: clang++

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version checks

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{ env.LLVM_VERSION }}
        sudo apt-get update
        sudo apt-get install -y \
          cmake ninja-build \
          clang-tidy-${{ env.LLVM_VERSION }} \
          clang-format-${{ env.LLVM_VERSION }} \
          valgrind

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install cmake ninja llvm@${{ env.LLVM_VERSION }}
        echo "/opt/homebrew/opt/llvm@${{ env.LLVM_VERSION }}/bin" >> $GITHUB_PATH

    - name: Configure CMake
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DMETAGRAPH_WERROR=ON \
          -DMETAGRAPH_SANITIZERS=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Build
      run: cmake --build build --parallel

    - name: Test
      run: ctest --test-dir build --output-on-failure --parallel

    - name: Static Analysis
      if: matrix.build_type == 'Debug'
      run: ./scripts/run-clang-tidy.sh

    - name: Security Audit
      if: matrix.build_type == 'Release'
      run: ./scripts/security-audit.sh

    - name: Upload artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failure-logs-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/
          .ignored/
        retention-days: 7

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install clang-format
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{ env.LLVM_VERSION }}
        sudo apt-get install -y clang-format-${{ env.LLVM_VERSION }}

    - name: Check formatting
      run: ./scripts/run-clang-format.sh

  sanitizers:
    name: Sanitizers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, undefined, thread, memory]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{ env.LLVM_VERSION }}
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build

    - name: Configure with ${{ matrix.sanitizer }} sanitizer
      env:
        CC: clang-18
        CXX: clang++-18
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DMETAGRAPH_SANITIZERS=ON \
          -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=${{ matrix.sanitizer }}"

    - name: Build
      run: cmake --build build

    - name: Test with ${{ matrix.sanitizer }} sanitizer
      run: ctest --test-dir build --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1:strict_string_checks=1
        UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1
        TSAN_OPTIONS: halt_on_error=1:second_deadlock_stack=1
        MSAN_OPTIONS: halt_on_error=1:print_stats=1

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{ env.LLVM_VERSION }}
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build lcov

    - name: Configure with coverage
      env:
        CC: clang-18
        CXX: clang++-18
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_FLAGS="--coverage -fprofile-instr-generate -fcoverage-mapping" \
          -DCMAKE_EXE_LINKER_FLAGS="--coverage"

    - name: Build
      run: cmake --build build

    - name: Test
      run: |
        LLVM_PROFILE_FILE="coverage-%p.profraw" ctest --test-dir build --output-on-failure
        llvm-profdata-18 merge -sparse coverage-*.profraw -o coverage.profdata
        llvm-cov-18 report ./build/bin/* -instr-profile=coverage.profdata

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.profdata
        fail_ci_if_error: true

  all-checks-pass:
    name: All Checks Pass
    needs: [quality-matrix, format-check, sanitizers, coverage]
    runs-on: ubuntu-latest
    steps:
    - run: echo "All checks passed!"