name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly to catch regressions
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  # ============================================================================
  # Pre-commit checks and formatting
  # ============================================================================
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: pre-commit/action@v3.0.1

  # ============================================================================
  # Build matrix: Multiple compilers and platforms
  # ============================================================================
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux builds with different compilers
          - name: "Ubuntu GCC 13"
            os: ubuntu-latest
            cc: gcc-13
            cxx: g++-13
            build_type: Release
            sanitizers: false

          - name: "Ubuntu GCC 14"
            os: ubuntu-latest
            cc: gcc-14
            cxx: g++-14
            build_type: Release
            sanitizers: true

          - name: "Ubuntu Clang 17"
            os: ubuntu-latest
            cc: clang-17
            cxx: clang++-17
            build_type: Release
            sanitizers: false

          - name: "Ubuntu Clang 18"
            os: ubuntu-latest
            cc: clang-18
            cxx: clang++-18
            build_type: Release
            sanitizers: true

          # Debug builds with sanitizers
          - name: "Debug + ASAN"
            os: ubuntu-latest
            cc: clang-18
            cxx: clang++-18
            build_type: Debug
            sanitizers: true
            asan: true

          - name: "Debug + UBSAN"
            os: ubuntu-latest
            cc: clang-18
            cxx: clang++-18
            build_type: Debug
            sanitizers: true
            ubsan: true

          # macOS builds
          - name: "macOS Clang"
            os: macos-latest
            cc: clang
            cxx: clang++
            build_type: Release
            sanitizers: false

          # Windows builds
          - name: "Windows MSVC"
            os: windows-latest
            cc: cl
            cxx: cl
            build_type: Release
            sanitizers: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            ninja-build \
            ${{ matrix.config.cc }} \
            ${{ matrix.config.cxx }} \
            clang-tidy \
            cppcheck \
            valgrind \
            lcov

          # Install newer CMake if needed
          cmake_version=$(cmake --version | head -n1 | cut -d' ' -f3)
          if dpkg --compare-versions "$cmake_version" lt "3.28"; then
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo apt-key add -
            echo 'deb https://apt.kitware.com/ubuntu/ focal main' | sudo tee /etc/apt/sources.list.d/kitware.list
            sudo apt-get update
            sudo apt-get install -y cmake
          fi

      - name: Install dependencies (macOS)
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install cmake ninja llvm cppcheck

      - name: Install dependencies (Windows)
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install cmake ninja

      - name: Configure build
        shell: bash
        run: |
          # Set up build directory
          mkdir build
          cd build

          # Configure CMake options
          cmake_options=""
          cmake_options="$cmake_options -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}"
          cmake_options="$cmake_options -DHYPERDAG_BUILD_TESTS=ON"
          cmake_options="$cmake_options -DHYPERDAG_BUILD_EXAMPLES=ON"

          if [[ "${{ matrix.config.sanitizers }}" == "true" ]]; then
            cmake_options="$cmake_options -DHYPERDAG_SANITIZERS=ON"
          fi

          if [[ "${{ matrix.config.asan }}" == "true" ]]; then
            cmake_options="$cmake_options -DHYPERDAG_ASAN=ON"
          fi

          if [[ "${{ matrix.config.ubsan }}" == "true" ]]; then
            cmake_options="$cmake_options -DHYPERDAG_UBSAN=ON"
          fi

          # Set compilers
          if [[ "${{ matrix.config.cc }}" != "cl" ]]; then
            export CC=${{ matrix.config.cc }}
            export CXX=${{ matrix.config.cxx }}
          fi

          # Configure
          cmake .. $cmake_options -G Ninja

      - name: Build
        shell: bash
        run: |
          cd build
          cmake --build . --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)

      - name: Run tests
        shell: bash
        run: |
          cd build
          ctest --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4) --output-on-failure

      - name: Static analysis
        if: matrix.config.name == 'Ubuntu Clang 18'
        shell: bash
        run: |
          cd build
          cmake --build . --target static-analysis

      - name: Generate coverage report
        if: matrix.config.build_type == 'Debug' && matrix.config.asan == true
        shell: bash
        run: |
          cd build
          # TODO: Add coverage generation when we have tests
          echo "Coverage reporting will be added with test implementation"

  # ============================================================================
  # Docker matrix testing with bleeding-edge compilers
  # ============================================================================
  docker-matrix:
    name: Docker ${{ matrix.compiler }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc15, clang18]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build with Docker
        run: |
          docker build -f docker/Dockerfile.${{ matrix.compiler }} -t hyperdag-${{ matrix.compiler }} .
          docker run --rm -v $PWD:/workspace hyperdag-${{ matrix.compiler }} \
            bash -c "cd /workspace && mkdir -p build && cd build && \
                     cmake -DHYPERDAG_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release .. && \
                     cmake --build . --parallel \$(nproc)"

  # ============================================================================
  # Security scanning
  # ============================================================================
  security:
    name: Security scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: cpp
          queries: security-and-quality

      - name: Build for CodeQL
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Debug ..
          cmake --build . --parallel $(nproc)

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Run security audit script
        run: |
          chmod +x scripts/security-audit.sh
          ./scripts/security-audit.sh

  # ============================================================================
  # Performance regression testing
  # ============================================================================
  performance:
    name: Performance benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc-13 g++-13 valgrind perf

      - name: Run performance tests
        run: |
          chmod +x scripts/profile.sh
          # TODO: Add performance testing when we have benchmarks
          echo "Performance testing will be added with benchmark implementation"

  # ============================================================================
  # Documentation and release preparation
  # ============================================================================
  docs-and-release:
    name: Documentation and release checks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check version consistency
        run: |
          chmod +x scripts/check-version-consistency.sh
          ./scripts/check-version-consistency.sh

      - name: Validate documentation
        run: |
          # Check that all feature specs are properly linked
          find docs/features -name "F*.md" | while read -r feature; do
            feature_id=$(basename "$feature" .md)
            if ! grep -q "$feature_id" docs/features/README.md; then
              echo "ERROR: Feature $feature_id not referenced in docs/features/README.md"
              exit 1
            fi
          done

          # Check README links
          if ! [ -f docs/features/README.md ]; then
            echo "ERROR: docs/features/README.md missing"
            exit 1
          fi

          echo "âœ“ Documentation validation passed"

  # ============================================================================
  # Summary job for required checks
  # ============================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [pre-commit, build, docker-matrix, security]
    if: always()

    steps:
      - name: Check CI results
        run: |
          if [[ "${{ needs.pre-commit.result }}" != "success" ]]; then
            echo "Pre-commit checks failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build matrix failed"
            exit 1
          fi
          if [[ "${{ needs.docker-matrix.result }}" != "success" ]]; then
            echo "Docker matrix failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          echo "âœ… All CI checks passed!"
